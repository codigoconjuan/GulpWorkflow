01 
consola:

npm init



02:

consola

npm install --save-dev gulp

npm install --save-dev gulp-sass

03

var gulp = require('gulp');
var sass = require('gulp-sass');


var SOURCEPATHS = {
  sourceFolder: 'src/*.*',
  sassSource : 'src/scss/*.scss',
  htmlSource :'src/*.html',
  jsSource: 'src/js/**'
}

gulp.task('sass', function() {
  return gulp.src(SOURCEPATHS.sassSource)
    //nested, compact expanded
    .pipe(sass({outputStyle: 'compressed'}).on('error', sass.logError))
    .pipe(gulp.dest('app/css'));
});

gulp.task('default', ['sass']);



04

npm install --save-dev browser-sync


var browserSync =require('browser-sync');
var reload = browserSync.reload;

var SOURCEPATHS = {
  sourceFolder : 'src/',
  sassSource : 'src/scss/*.scss',
  htmlSource :'src/*.html',
  jsSource: 'src/js/*.js'
}
var APPPATH = {
  root: 'app',
  css: 'app/css',
  js: 'app/js'
}
gulp.task('serve', ['sass'], function() {
  browserSync.init([APPPATH.css + '/*.css', APPPATH.root+'/*.html',APPPATH.js+'/*.js' ], {
      server: {
        baseDir : APPPATH.root
      }
  })
});

gulp.task('default', ['serve']);

05



06

npm install --save-dev gulp-autoprefixer

var autoprefixer = require('gulp-autoprefixer');

gulp.task('sass', function() {
  return gulp.src(SOURCEPATHS.sassSource)
    .pipe(autoprefixer())
    //nested, compact expanded compressed
    .pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError))
    .pipe(gulp.dest('app/css'));
});

h1 {
  color: white;
}

h1:hover {
  color: red;
  -webkit-transition: all 1s ease;
  transition: all 1s ease;
}


07

gulp.task('copy', function() {
  gulp.src(SOURCEPATHS.htmlSource)
      .pipe(gulp.dest(APPPATH.root));
});

gulp.task('watch', ['serve', 'sass', 'copy'], function(){
  gulp.watch([SOURCEPATHS.sassSource],['sass'] );
  gulp.watch([SOURCEPATHS.htmlSource], ['copy']);
});


08


gulp.task('copy',['clean-scripts', 'clean-html'], function() {
  gulp.src([SOURCEPATHS.jsSource, SOURCEPATHS.htmlSource], 
      {base: SOURCEPATHS.sourceFolder})
      .pipe(gulp.dest(APPPATH.root));
});


gulp.task('watch', ['serve', 'sass', 'copy'], function(){
  gulp.watch([SOURCEPATHS.sassSource],['sass'] );
  gulp.watch([SOURCEPATHS.jsSource], ['copy']);
  gulp.watch([SOURCEPATHS.htmlSource], ['copy']);
});

09


npm install --save-dev gulp-clean

var clean = require('gulp-clean');


gulp.task('clean-scripts', function () {
  return gulp.src(APPPATH.js +'/*.js',  {read: false, force: true})
    .pipe(clean());
});

gulp.task('clean-html', function () {
  return gulp.src(APPPATH.root + '/*.html',  {read: false, force: true})
    .pipe(clean());
});


10


npm install --save-dev gulp-concat


var concat = require('gulp-concat');

gulp.task('scripts', function() {
    gulp.src(SOURCEPATHS.jsSource)
        .pipe(concat('main.js'))
        .pipe(gulp.dest(APPPATH.js))
});

borrar copy the watch
agregar: gulp.watch([SOURCEPATHS.jsSource], ['scripts']);


agregar a watch


11

npm install --save-dev gulp-browserify

npm install --save-dev jquery

npm install --save-dev mustache

npm install --save-dev bootstrap

en scriptsjs


global.jQuery = require('jquery');
bootstrap = require('bootstrap');
mustache = require('mustache');

jQuery(document).ready(function() {
  alert("hola");
});

12

npm install --save-dev merge-stream

var merge = require('merge-stream');


Unir SASS y CSS

gulp.task('sass', function() {
  var bootstrapCSS = gulp.src('./node_modules/bootstrap/dist/css/bootstrap.css')
  var sassFiles;
  
  
  sassFiles = gulp.src(SOURCEPATHS.sassSource)
    .pipe(autoprefixer())
    //nested, compact expanded compressed
    .pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError))
    
    return merge(sassFiles, bootstrapCSS)
      .pipe(concat('app.css'))
      .pipe(gulp.dest('app/css'));
});


13


<div id="slider" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#slider" data-slide-to="0" class="active"></li>
        <li data-target="#slider" data-slide-to="1"></li>
    </ol>
    
    <div class="carousel-inner">
        <div class="item active">
            <img src="http://placehold.it/1200x250.jpg">
        </div>
        <div class="item ">
            <img src="http://placehold.it/1200x250.jpg">
        </div>
    </div>
    
    <a href="#slider" class="left carousel-control" role="button" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
    </a>
    <a href="#slider" class="right carousel-control" role="button" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
    </a>
</div>

14

gulp.task('moveFonts', function() {
  gulp.src('./node_modules/bootstrap/dist/fonts/*.{eot,svg,ttf,woff,woff2}')
      .pipe(gulp.dest(APPPATH.fonts))
});

agregar a watch


15 
ejemplo con Mustache

jQuery(document).ready(function($) {
    var jqxhr = $.getJSON('data.json', function() {
      
    }).done(function(data) {
      var template = $('#template').html();
      var showTemplate = Mustache.render(template, data);
      $('#gallery').html(showTemplate);
    });
});
16


<div class="container">
    <div id="gallery" class="gallery row">
      <script id="template" type="x-tmpl-mustache">
          {{#gallery}}
              <div class="col-sm-6 col-md-4">
                  <div class="thumbnail">
                      <img src="img/{{image}}">
                  </div>
                  <div class="caption">
                      <h3 class="text-center">{{destiny}}</h3>
                  </div>
              </div>
          {{/gallery}}
      </script>
    </div>
</div>

17

mover imagenes y comprimirlas

npm install --save-dev gulp-newer

npm install --save-dev gulp-imagemin

var newer = require('gulp-newer');
var imagemin =require('gulp-imagemin');

var SOURCEPATHS = {
  imgSource: 'src/img/**'
}
var APPPATH = {
  img: 'app/img'
}


gulp.task('images', function() {
  return gulp.src(SOURCEPATHS.imgSource)
     .pipe(newer(APPPATH.img))
     .pipe(imagemin())
     .pipe(gulp.dest(APPPATH.img));
});



18

npm install --save-dev gulp-inject-partials

var injectPartials = require('gulp-inject-partials');

gulp.task('html', function() {
  return gulp.src(SOURCEPATHS.htmlSource)
           .pipe(injectPartials())
           .pipe(gulp.dest(APPPATH.root));
});
comentar copy


gulp.task('watch', ['serve','scripts',  'sass', 'moveFonts','images', 'html', 'clean-html'], function(){
  gulp.watch([SOURCEPATHS.sassSource],['sass'] );
  gulp.watch([SOURCEPATHS.jsSource], ['scripts']);
  gulp.watch([SOURCEPATHS.imgSource], ['images']);
  gulp.watch([SOURCEPATHS.htmlSource, SOURCEPATHS.htmlPartialSource], ['html']);
});


19

Min js

npm install --save-dev gulp-minify

var minify = require('gulp-minify');

gulp.task('compress', function() {
  gulp.src(SOURCEPATHS.jsSource)
      .pipe(concat('main.js'))
      .pipe(browserify())
      .pipe(minify())
      .pipe(gulp.dest(APPPATH.js))
});


20
min css

npm install --save-dev gulp-cssmin

npm install --save-dev gulp-rename


var rename = require('gulp-rename');
var cssmin = require('gulp-cssmin');

gulp.task('compresscss', function() {
  var bootstrapCSS = gulp.src('./node_modules/bootstrap/dist/css/bootstrap.css')
  var sassFiles;
  
  
  sassFiles = gulp.src(SOURCEPATHS.sassSource)
    .pipe(autoprefixer())
    //nested, compact expanded compressed
    .pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError))
    
    return merge(sassFiles, bootstrapCSS)
      .pipe(concat('app.css'))
      .pipe(cssmin())
      .pipe(rename({suffix: '.min'}))
      .pipe(gulp.dest('app/css'));
});

21

Minificar html

npm install --save-dev gulp-htmlmin


var htmlmin = require('gulp-htmlmin');

gulp.task('minifyHtml', function() {
  return gulp.src(SOURCEPATHS.htmlSource)
       .pipe(injectPartials())
      .pipe(htmlmin({collapseWhitespace:true}))
      .pipe(gulp.dest(APPPATH.root))
});


22

Task para production

gulp.task('production', ['minifyHtml', 'compresscss', 'compress']);
